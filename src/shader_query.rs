//! Shader Program Query
//! <https://www.khronos.org/opengl/wiki/Category:Core_API_Ref_Shader_Program_Query>
//!
//! # Description
//! The core OpenGL API reference for functions that
//! [get information about variables and constructs](https://www.khronos.org/opengl/wiki/Program_Introspection)
//! in successfully [linked programs](https://www.khronos.org/opengl/wiki/GLSL_Object). This
//! information includes, but is not limited to uniform definitions, attributes, fragment outputs,
//! etc. These queries also get various information about how to interface with the program
//! (attribute indices, fragment output indices, uniform locations, etc).

use crate::prelude::*;
use gl::types::*;

#[derive(Default, Debug, Copy, Clone, PartialEq)]
#[repr(transparent)]
pub struct UniformLocation(pub i32);

/// # Returns the location of a uniform variable
/// <https://registry.khronos.org/OpenGL-Refpages/gl4/html/glGetUniformLocation.xhtml>
///
/// # Arguments
///
/// # Example
/// ```no_run
/// # use rgl::prelude::*;
/// let loc: UniformLocation = get_uniform_location(
///     Program(42),
///     &std::ffi::CStr::from_bytes_with_nul(b"projection\0").unwrap()
/// );
/// assert_ne!(loc, UniformLocation(-1));
/// ```
///
/// # Description
/// [get_uniform_location] returns an integer that represents the location of a specific uniform
/// variable within a program object. `name` must be a null terminated string that contains no white
/// space. `name` must be an active uniform variable name in program that is not a structure, an
/// array of structures, or a subcomponent of a vector or a matrix. This function returns -1 if name
/// does not correspond to an active uniform variable in `program`, if `name` starts with the
/// reserved prefix "gl_", or if `name` is associated with an atomic counter or a named uniform
/// block.
///
/// Uniform variables that are structures or arrays of structures may be queried by calling
/// [get_uniform_location] for each field within the structure. The array element operator "[]" and
/// the structure field operator "." may be used in name in order to select elements within an array
/// or fields within a structure. The result of using these operators is not allowed to be another
/// structure, an array of structures, or a subcomponent of a vector or a matrix. Except if the last
/// part of name indicates a uniform variable array, the location of the first element of an array
/// can be retrieved by using the name of the array, or by using the name appended by "\[0\]".
///
/// The actual locations assigned to uniform variables are not known until the program object is
/// linked successfully. After linking has occurred, the command [get_uniform_location] can be used
/// to obtain the location of a uniform variable. This location value can then be passed to any
/// `uniform_*` setters to set the value of the uniform variable or to any `get_uniform_*` getters
/// in order to query the current value of the uniform variable. After a program object has been
/// linked successfully, the index values for uniform variables remain fixed until the next link
/// command occurs. Uniform variable locations and values can only be queried after a link if the
/// link was successful.
///
/// # Errors
/// * [Error::InvalidValue] - if `program` is not a value generated by OpenGL.
/// * [Error::InvalidOperation] - if `program` is not a program object.
/// * [Error::InvalidOperation] - if `program` has not been successfully linked.
///
/// # Associated Gets
/// * [get_active_uniform]
/// * [get_program_active_uniforms]
/// * [get_program_active_uniform_max_length]
/// * all `get_uniform_*` variants
/// * [is_program]  
///
/// # Version Support
///
/// | Function / Feature Name | 2.0 | 2.1 | 3.0 | 3.1 | 3.2 | 3.3 | 4.0 | 4.1 | 4.2 | 4.3 | 4.4 | 4.5 |
/// |-------------------------|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|
/// | [get_uniform_location] | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y |
///
/// # See Also
/// * [link_program]
/// * all `uniform_*` variants
pub fn get_uniform_location(program: Program, name: &std::ffi::CStr) -> UniformLocation {
    let program = program.0;
    let name = name.as_ptr() as *const GLchar;

    // SAFE: synchronous read of `name`, no memory retained
    let location = unsafe { gl::GetUniformLocation(program, name) };
    UniformLocation(location)
}
