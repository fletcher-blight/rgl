//! # Shader Program Creation
//! <https://www.khronos.org/opengl/wiki/Category:Core_API_Ref_Shader_Program_Creation>
//!
//! # Description
//! The core OpenGL API reference for functions that create
//! [GLSL](https://www.khronos.org/opengl/wiki/OpenGL_Shading_Language)
//! [shader and program objects](https://www.khronos.org/opengl/wiki/GLSL_Object), as well as
//! [Program Pipeline Objects](https://www.khronos.org/opengl/wiki/Shader_Compilation#Program_pipelines).
//! These functions either directly create shader objects or affect how shaders and programs are
//! compiled or linked together.

use crate::*;
use gl::types::*;

pub struct Program(u32);
pub struct Shader(u32);

/// # Attaches a shader object to a program object
/// <https://registry.khronos.org/OpenGL-Refpages/gl4/html/glAttachShader.xhtml>
///
/// # Arguments
/// * `program` - Specifies the program object to which a shader object will be attached.
/// * `shader` - Specifies the shader object that is to be attached.
///
/// # Example
/// ```no_run
/// # use rgl::prelude::*;
/// attach_shader(Program(42), Shader(7));
/// ```
///
/// # Description
/// In order to create a complete shader program, there must be a way to specify the list of things
/// that will be linked together. Program objects provide this mechanism. Shaders that are to be
/// linked together in a program object must first be attached to that program object.
/// [attach_shader] attaches the shader object specified by `shader` to the program object specified
/// by `program`. This indicates that `shader` will be included in link operations that will be
/// performed on `program`.
///
/// All operations that can be performed on a shader object are valid whether or not the shader
/// object is attached to a program object. It is permissible to attach a shader object to a program
/// object before source code has been loaded into the shader object or before the shader object has
/// been compiled. It is permissible to attach multiple shader objects of the same type because
/// each may contain a portion of the complete shader. It is also permissible to attach a shader
/// object to more than one program object. If a shader object is deleted while it is attached to a
/// program object, it will be flagged for deletion, and deletion will not occur until
/// [detach_shader] is called to detach it from all program objects to which it is attached.
///
/// # Errors
/// * [Error::InvalidValue] - if either `program` or `shader` is not a value generated by OpenGL.
/// * [Error::InvalidOperation] - if `program` is not a program object
/// * [Error::InvalidOperation] - if `shader` is not a shader object
/// * [Error::InvalidOperation] - if `shader` is already attached to `program`
///
/// # Associated Gets
/// * [get_attached_shaders]
/// * [get_shader_info_log]
/// * [get_shader_source]
/// * [is_program]
/// * [is_shader]
///
/// # Version Support
///
/// | Function / Feature Name | 2.0 | 2.1 | 3.0 | 3.1 | 3.2 | 3.3 | 4.0 | 4.1 | 4.2 | 4.3 | 4.4 | 4.5 |
/// |-------------------------|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|
/// | [attach_shader] | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y |
///
/// # See Also
/// * [compile_shader]
/// * [create_shader]
/// * [delete_shader]
/// * [detach_shader]
/// * [link_program]
/// * [shader_source]
pub fn attach_shader(program: Program, shader: Shader) {
    let program = program.0;
    let shader = shader.0;

    // SAFE: synchronous integer copy
    unsafe { gl::AttachShader(program, shader) }
}
