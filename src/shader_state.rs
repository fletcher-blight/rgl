//! # Shader Program Usage and State
//! <https://www.khronos.org/opengl/wiki/Category:Core_API_Ref_Shader_Program_Usage_and_State>
//!
//! # Description
//! The core OpenGL API reference for functions that modify GLSL program state and bind them to the context for rendering.

use crate::prelude::*;
use gl::types::*;

/// # Installs a program object as part of current rendering state
/// <https://registry.khronos.org/OpenGL-Refpages/gl4/html/glUseProgram.xhtml>
///
/// # Arguments
/// * `program` - Specifies the handle of the program object whose executables are to be used as
/// part of current rendering state.
///
/// # Example
/// ```no_run
/// # use rgl::prelude::*;
/// use_program(Program(42));
/// ```
///
/// # Description
/// [use_program] installs the program object specified by program as part of current rendering
/// state. One or more executables are created in a program object by successfully attaching shader
/// objects to it with [attach_shader], successfully compiling the shader objects with
/// [compile_shader], and successfully linking the program object with [link_program].
///
/// While a program object is in use, applications are free to modify attached shader objects,
/// compile attached shader objects, attach additional shader objects, and detach or delete shader
/// objects. None of these operations will affect the executables that are part of the current
/// state. However, relinking the program object that is currently in use will install the program
/// object as part of the current rendering state if the link operation was successful (see
/// [link_program] ). If the program object currently in use is relinked unsuccessfully, its link
/// status will be set to false, but the executables and associated state will remain part of the
/// current state until a subsequent call to [use_program] removes it from use. After it is removed
/// from use, it cannot be made part of current state until it has been successfully relinked.
///
/// If program is zero, then the current rendering state refers to an invalid program object and the
/// results of shader execution are undefined. However, this is not an error.
///
/// If program does not contain shader objects of type [ShaderType::Fragment], an executable will be
/// installed on the vertex, and possibly geometry processors, but the results of fragment shader
/// execution will be undefined.
///
/// Like buffer and texture objects, the name space for program objects may be shared across a set
/// of contexts, as long as the server sides of the contexts share the same address space. If the
/// name space is shared across contexts, any attached objects and the data associated with those
/// attached objects are shared as well.
///
/// Applications are responsible for providing the synchronization across API calls when objects are
/// accessed from different execution threads.
///
/// # Errors
/// * [Error::InvalidValue] - if `program` is not a value generated by OpenGL.
/// * [Error::InvalidOperation] - if `program` is not a program object.
/// * [Error::InvalidOperation] - if `program` could not be made part of current state.
/// * [Error::InvalidOperation] - if `program` is the currently active program object and transform
/// feedback mode is active.
///
/// # Associated Gets
/// * [get_current_program]
/// * [get_active_attrib] with arguments `program` and the index of an active attribute variable
/// * [get_active_uniform] with arguments `program` and the index of an active uniform variable
/// * [get_attached_shaders] with arguments `program`
/// * [get_attrib_location] with arguments `program` and the name of an attribute variable
/// * all `get_program_*` variants
/// * [get_program_info_log] with arguments `program`
/// * [get_uniform] with arguments `program` and the location of a uniform variable
/// * [get_uniform_location] with arguments `program` and the name of a uniform variable
/// * [is_program]
///
/// # Version Support
///
/// | Function / Feature Name | 2.0 | 2.1 | 3.0 | 3.1 | 3.2 | 3.3 | 4.0 | 4.1 | 4.2 | 4.3 | 4.4 | 4.5 |
/// |-------------------------|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|-----|
/// | [use_program] | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y | Y |
///
/// # See Also
/// * [attach_shader]
/// * [bind_attrib_location]
/// * [compile_shader]
/// * [create_program]
/// * [delete_program]
/// * [detach_shader]
/// * all `uniform_*` variants
/// * [use_program]
/// * [validate_program]
/// * [vertex_attrib]
pub fn use_program(program: Program) {
    let program = program.0;
    unsafe { gl::UseProgram(program) }
}
